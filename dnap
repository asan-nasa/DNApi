#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2015, 2016 Junko Tsuji

# Predict 3'adapter sequence from FASTQ input by counting kmers and
# assembling more frequent kmers. For filtering less frequent kmers,
# this script computes ratio between the counts of the most frequent
# kmer and a target kmer as a cutoff:
#      Ratio = mostFrequentKmerCount / targetKmerCount
# If the ratio is lower than the cutoff, the kmer is discarded.

import sys, os.path, signal
from optparse import OptionParser
from dnapilib.apred import adapterPrediction

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    usage = "%prog [options] <fastq>"
    description = "Predict 3'adapter sequence from a FASTQ input."

    op = OptionParser(usage=usage, description=description)
    op.add_option("-k", metavar="BP", type="int", default=9,
                  help="kmer length in bp (default=%default)")
    op.add_option("-r", metavar="FLOAT", type="float", default=1.4,
                  help="filtering ratio for less frequent kmers (default=%default)")
    op.add_option("-a", action="store_true",
                  help="show other candidates if any")

    (opts, args) = op.parse_args()
    if len(args) != 1: op.error("input fastq")

    try:
        if opts.k <= 0: raise Exception("bad value: -k")
        if opts.r <= 1: raise Exception("bad value: -r")
        sample_num = 50000  # subsampled reads
        a = adapterPrediction(args[0], opts.r, opts.k, sample_num)
        outStr = "Predicted_3'adapter_%d=%s"
        if opts.a:
            for i, x in enumerate(a):
                print outStr % (i+1, x[0])
        else:
            print outStr % (1, a[0][0])
    except KeyboardInterrupt: pass
    except Exception ,e:
        prog = os.path.basename(sys.argv[0])
        sys.exit(prog + ": error: " + str(e))
